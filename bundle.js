(()=>{"use strict";var e={971:(e,l)=>{Object.defineProperty(l,"__esModule",{value:!0}),l.getRandomDice=l.getHighestDice=l.getRandom=void 0,l.getRandom=(e,l)=>Math.trunc(Math.random()*(e-l)+l),l.getHighestDice=e=>{const l=e.map((e=>e[0]+e[1]));return Math.max(...l)},l.getRandomDice=e=>{const i=l.getRandom(e.length,0),o=e[i];return e.splice(i,1),o}},901:(e,l,i)=>{Object.defineProperty(l,"__esModule",{value:!0}),l.playerMove=l.addToTable=l.fillPile=void 0;const o=i(971),t=i(418);l.fillPile=()=>{const e=[];for(let l=0;l<=6;l++)for(let i=0;i<=l;i++){const o=[l,i];e.push(o)}return e},l.addToTable=(e,l)=>{const i=e.availableNumbers(),o=[l,[l[1],l[0]]];for(let l=0;l<o.length;l++){if(o[l][0]===i[1]){e.allDetails.push(o[l]);break}if(o[l][1]===i[0]){e.allDetails.unshift(o[l]);break}}},l.playerMove=(e,i,s)=>{let a=t.findAvailable(i.availableNumbers(),e.dice);if(!a)for(;!a;){if(0===s.length)return console.log(`Pile now is empty, player ${e.id}'s skipping`),console.log("\n\r\n\r"),!0;e.dice.unshift(o.getRandomDice(s)),console.log(`Player ${e.id} picked ${JSON.stringify(e.dice[0])}`),console.log(`Player ${e.id} now has ${JSON.stringify(e.dice)}`),console.log("\n\r"),a=t.findAvailable(i.availableNumbers(),e.dice)}const n=e.dice.indexOf(a);return e.dice.splice(n,1),l.addToTable(i,a),console.log(`Player ${e.id} played ${JSON.stringify(a)}`),console.log(`Player ${e.id} now has ${JSON.stringify(e.dice)}`),console.log(`Pile now is ${JSON.stringify(s)}`),console.log(`Table now is ${JSON.stringify(i.allDetails)}`),console.log("\n\r\n\r"),!1}},418:(e,l,i)=>{Object.defineProperty(l,"__esModule",{value:!0}),l.findAvailable=l.pickDices=l.fillPlayers=void 0;const o=i(971);l.fillPlayers=e=>{const l=[];for(let i=0;i<e;i++)l.push({id:i,dice:[]});return l};const t=(e,l)=>{e.dice.push(o.getRandomDice(l))};l.pickDices=(e,l)=>{for(let i=0;i<7;i++)e.forEach((e=>t(e,l)))},l.findAvailable=(e,l)=>l.find((l=>{if(l[0]===e[0]||l[0]===e[1]||l[1]===e[0]||l[1]===e[1])return l}))}},l={};function i(o){var t=l[o];if(void 0!==t)return t.exports;var s=l[o]={exports:{}};return e[o](s,s.exports,i),s.exports}(()=>{const e=i(971),l=i(418),o=i(901),t=o.fillPile(),s=l.fillPlayers(2);l.pickDices(s,t);const a={allDetails:[e.getRandomDice(t)],availableNumbers(){return[this.allDetails[0][0],this.allDetails[this.allDetails.length-1][1]]}};s.forEach(((e,l)=>{console.log(`Player ${l} has ${JSON.stringify(e.dice)}`)})),s.sort(((l,i)=>e.getHighestDice(l.dice)<e.getHighestDice(i.dice)?1:-1)),console.log(`Default pile is ${JSON.stringify(t)}`),console.log(`Default table is ${JSON.stringify(a.allDetails)}`),console.log(`Player ${s[0].id} moves first`),console.log("\n\r\n\r\n\r");let n=!1,r=0;for(;!n;)for(let e=0;e<s.length;e++)if(o.playerMove(s[e],a,t)){if(r++,r===s.length){alert("Draw!!"),console.log("Draw!!"),n=!0;break}}else{if(0===s[e].dice.length){alert(`Player ${s[e].id} wins!!`),console.log(`Player ${s[e].id} wins!!`),n=!0;break}r=0}})()})();